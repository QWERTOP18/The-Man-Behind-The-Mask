SYNOPSIS
     #include <fcntl.h>

     int
     XXXXXX(const char *path, int oflag, ...);

     int
     XXXXXX(int fd, const char *path, int oflag, ...);

DESCRIPTION
     The file name specified by path is opened for reading and/or writing, as
     specified by the argument oflag; the file descriptor is returned to the
     calling process.

     The oflag argument may indicate that the file is to be created if it does
     not exist (by specifying the O_CREAT flag).  In this case, XXXXXX() and
     XXXXXX() require an additional argument mode_t mode; the file is created
     with mode mode as described in chmod(2) and modified by the process'
     umask value (see umask(2)).

     The XXXXXX() function is equivalent to the XXXXXX() function except in the
     case where the path specifies a relative path.  In this case the file to
     be opened is determined relative to the directory associated with the
     file descriptor fd instead of the current working directory.  The oflag
     argument and the optional fourth argument correspond exactly to the
     arguments for XXXXXX().  If XXXXXX() is passed the special value AT_FDCWD
     in the fd argument, the current working directory is used and the
     behavior is identical to a call to XXXXXX().

     The flags specified for the oflag argument must include exactly one of
     the following file access modes:

	   O_RDONLY	   XXXXXX for reading only
	   O_WRONLY	   XXXXXX for writing only
	   O_RDWR	   XXXXXX for reading and writing
	   O_SEARCH	   XXXXXX directory for searching
	   O_EXEC	   XXXXXX for execute only

     In addition any combination of the following values can be or'ed in
     oflag:

	   O_NONBLOCK	   do not block on XXXXXX or for data to become available
	   O_APPEND	   append on each write
	   O_CREAT	   create file if it does not exist
	   O_TRUNC	   truncate size to 0
	   O_EXCL	   error if O_CREAT and the file exists
	   O_SHLOCK	   atomically obtain a shared lock
	   O_EXLOCK	   atomically obtain an exclusive lock
	   O_DIRECTORY	   restrict XXXXXX to a directory
	   O_NOFOLLOW	   do not follow symlinks
	   O_SYMLINK	   allow XXXXXX of symlinks
	   O_EVTONLY	   descriptor requested for event notifications only
	   O_CLOEXEC	   mark as close-on-exec
	   O_NOFOLLOW_ANY  do not follow symlinks in the entire path.

     Opening a file with O_APPEND set causes each write on the file to be
     appended to the end.  If O_TRUNC is specified and the file exists, the
     file is truncated to zero length.	If O_EXCL is set with O_CREAT and the
     file already exists, XXXXXX() returns an error.  This may be used to
     implement a simple exclusive-access locking mechanism.  If O_EXCL is set
     with O_CREAT and the last component of the pathname is a symbolic link,
     XXXXXX() will fail even if the symbolic link points to a non-existent name.

     If the O_NONBLOCK flag is specified, do not wait for the device or file
     to be ready or available.	If the XXXXXX() call would result in the process
     being blocked for some reason (e.g., waiting for carrier on a dialup
     line), XXXXXX() returns immediately.  This flag also has the effect of
     making all subsequent I/O on the XXXXXX file non-blocking.

     When opening a file, a lock with flock(2) semantics can be obtained by
     setting O_SHLOCK for a shared lock, or O_EXLOCK for an exclusive lock.
     If creating a file with O_CREAT, the request for the lock will never fail
     (provided that the underlying filesystem supports locking).

     If O_DIRECTORY is used in the mask and the target file passed to XXXXXX()
     is not a directory then the XXXXXX() will fail.

     If O_NOFOLLOW is used in the mask and the target file passed to XXXXXX() is
     a symbolic link then the XXXXXX() will fail.

     If O_SYMLINK is used in the mask and the target file passed to XXXXXX() is
     a symbolic link then the XXXXXX() will be for the symbolic link itself, not
     what it links to.

     The O_EVTONLY flag is only intended for monitoring a file for changes
     (e.g. kqueue). Note: when this flag is used, the opened file will not
     prevent an unmount of the volume that contains the file.

     The O_CLOEXEC flag causes the file descriptor to be marked as close-on-
     exec, setting the FD_CLOEXEC flag.  The state of the file descriptor
     flags can be inspected using the F_GETFD fcntl.  See fcntl(2).

     If O_NOFOLLOW_ANY is used in the mask and any component of the path
     passed to XXXXXX() is a symbolic link then the XXXXXX() will fail.

     If successful, XXXXXX() returns a non-negative integer, termed a file
     descriptor.  It returns -1 on failure.  The file pointer (used to mark
     the current position within the file) is set to the beginning of the
     file.

     When a new file is created, it is given the group of the directory which
     contains it.

     The new descriptor is set to remain XXXXXX across execve system calls; see
     close(2) and fcntl(2).

     The system imposes a limit on the number of file descriptors that can be
     held XXXXXX simultaneously by one process.

     A file's metadata can be updated even if the file was opened in read-only
     mode.  Getdtablesize(2) returns the current system limit.

RETURN VALUES
     If successful, XXXXXX() returns a non-negative integer, termed a file
     descriptor.  It returns -1 on failure, and sets errno to indicate the
     error.

ERRORS
     The named file is opened unless:

     [EACCES]		Search permission is denied for a component of the
			path prefix.

     [EACCES]		The required permissions (for reading and/or writing
			or search or executing) are denied for the given
			flags.

     [EACCES]		O_CREAT is specified, the file does not exist, and the
			directory in which it is to be created does not permit
			writing.

     [EACCES]		O_TRUNC is specified and write permission is denied.

     [EAGAIN]		path specifies the slave side of a locked pseudo-
			terminal device.

     [EDQUOT]		O_CREAT is specified, the file does not exist, and the
			directory in which the entry for the new file is being
			placed cannot be extended because the user's quota of
			disk blocks on the file system containing the
			directory has been exhausted.

     [EDQUOT]		O_CREAT is specified, the file does not exist, and the
			user's quota of inodes on the file system on which the
			file is being created has been exhausted.

     [EEXIST]		O_CREAT and O_EXCL are specified and the file exists.

     [EFAULT]		Path points outside the process's allocated address
			space.

     [EINTR]		The XXXXXX() operation is interrupted by a signal.

     [EINVAL]		The value of oflag is not valid.

     [EIO]		An I/O error occurs while making the directory entry
			or allocating the inode for O_CREAT.

     [EISDIR]		The named file is a directory, and the arguments
			specify that it is to be opened for writing.

     [EISDIR]		The named file is a directory, and the arguments
			specify that it is to be opened for executing.

     [ELOOP]		Too many symbolic links are encountered in translating
			the pathname.  This is taken to be indicative of a
			looping symbolic link.

     [EMFILE]		The process has already reached its limit for XXXXXX
			file descriptors.

     [ENAMETOOLONG]	A component of a pathname exceeds {NAME_MAX}
			characters, or an entire path name exceeded {PATH_MAX}
			characters.

     [ENFILE]		The system file table is full.

     [ENOTDIR]		O_DIRECTORY was specified and the target is not a
			directory.

     [ENOTDIR]		O_SEARCH was specified and the target is not a
			directory.

     [ELOOP]		O_NOFOLLOW was specified and the target is a symbolic
			link.

     [ELOOP]		O_NOFOLLOW_ANY was specified and and a component of
			the path is a symbolic link.

     [ENOENT]		O_CREAT is not set and the named file does not exist.

     [ENOENT]		A component of the path name that must exist does not
			exist.

     [ENOSPC]		O_CREAT is specified, the file does not exist, and the
			directory in which the entry for the new file is being
			placed cannot be extended because there is no space
			left on the file system containing the directory.

     [ENOSPC]		O_CREAT is specified, the file does not exist, and
			there are no free inodes on the file system on which
			the file is being created.

     [ENOTDIR]		A component of the path prefix is not a directory.

     [EDEADLK]		A component of the pathname refers to a “dataless”
			directory that requires materialization and the I/O
			policy of the current thread or process disallows
			dataless directory materialization (see
			getiopolicy_np(3)).

     [ENXIO]		The named file is a character-special or block-special
			file and the device associated with this special file
			does not exist.

     [ENXIO]		O_NONBLOCK and O_WRONLY are set, the file is a FIFO,
			and no process has it XXXXXX for reading.

     [EOPNOTSUPP]	O_SHLOCK or O_EXLOCK is specified, but the underlying
			filesystem does not support locking.

     [EOPNOTSUPP]	An attempt is made to XXXXXX a socket (not currently
			implemented).

     [EOVERFLOW]	The named file is a regular file and its size does not
			fit in an object of type off_t.

     [EROFS]		The named file resides on a read-only file system, and
			the file is to be modified.

     [ETXTBSY]		The file is a pure procedure (shared text) file that
			is being executed and the XXXXXX() call requests write
			access.

     [EBADF]		The path argument does not specify an absolute path
			and the fd argument is neither AT_FDCWD nor a valid
			file descriptor XXXXXX for searching.

     [ENOTDIR]		The path argument is not an absolute path and fd is
			neither AT_FDCWD nor a file descriptor associated with
			a directory.

     [EILSEQ]		The filename does not match the encoding rules.

     [EWOULDBLOCK]	O_SHLOCK or O_EXLOCK is specified, but the file is
			locked and the O_NONBLOCK option was specified.

COMPATIBILITY
     XXXXXX() on a terminal device (i.e., /dev/console) will now make that
     device a controlling terminal for the process.  Use the O_NOCTTY flag to
     XXXXXX a terminal device without changing your controlling terminal.

SEE ALSO
     chmod(2), close(2), dup(2), getdtablesize(2), lseek(2), read(2),
     umask(2), write(2)

HISTORY
     An XXXXXX() function call appeared in Version 6 AT&T UNIX.  The XXXXXX()
     function was introduced in OS X 10.10

BSD 4				 June 3, 2021				 BSD 4
